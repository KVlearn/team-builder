{"version":3,"sources":["components/Forms.js","data.js","App.js","serviceWorker.js","index.js"],"names":["Forms","addMember","memberToEdit","editMember","console","log","useState","urname","email","role","formData","setFormData","useEffect","handleChange","e","target","name","value","handleSubmit","preventDefault","onSubmit","htmlFor","onChange","type","id","placeholder","onClick","data","App","teamList","setTeamList","setmemberToEdit","className","memInfo","newMember","Date","now","editMemberInfo","mapNewList","map","item","index","editInfo","filter","handleEdit","newMemList","splice","handleDelete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.add9973e.chunk.js","sourcesContent":["import React,{useEffect, useState} from \"react\";\r\n\r\nfunction Forms({addMember,memberToEdit,editMember}){\r\n\r\nconsole.log('Member to edit in Form=',memberToEdit)\r\n\r\nconst [formData,setFormData]=useState(\r\n    {urname:\"\",\r\n     email:\"\",\r\n     role:\"\",\r\n     })\r\n\r\n useEffect(()=>{\r\n  //Populate the form with current member data\r\n  setFormData({...formData,...memberToEdit} )\r\n },[memberToEdit])\r\n\r\nconst handleChange=(e)=>{\r\nsetFormData({...formData,[e.target.name] : e.target.value})\r\n}   \r\n\r\nconsole.log('Form Data in Form=',formData)\r\nconst handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    (memberToEdit)? editMember(formData) :addMember(formData);\r\n    setFormData({\r\n        urname:\"\",email:\"\",role:\"\"\r\n    })\r\n}\r\nreturn(\r\n    <div>\r\n    <forms\r\n    onSubmit={handleSubmit}>\r\n\r\n    <label htmlFor=\"urname\">Enter your Name</label>\r\n    <input\r\n     onChange={handleChange}\r\n     type=\"text\"\r\n     name=\"urname\"\r\n     id=\"urname\"\r\n     value={formData.urname}\r\n     placeholder={\"Your sweet Name!\"}\r\n    />\r\n    <br/>\r\n    <label htmlFor=\"email\">Enter your Email</label>\r\n    <input\r\n    onChange={handleChange}\r\n    type=\"email\"\r\n    name=\"email\"\r\n    id=\"email\"\r\n    value={formData.email}\r\n    placeholder={\"Your email ID\"}\r\n    />\r\n    \r\n    <br/>\r\n    <label htmlFor=\"role\">Enter your Role</label>\r\n    <input\r\n    onChange={handleChange}\r\n    type=\"role\"\r\n    name=\"role\"\r\n    id=\"role\"\r\n    value={formData.role}\r\n    placeholder={\"Your Role\"}\r\n    />\r\n    <br/>\r\n    <label htmlFor=\"submit\"></label>\r\n    <div>\r\n    <button\r\n    onClick={handleSubmit}\r\n    name=\"submit\"\r\n    id=\"submit\"\r\n    type=\"submit\"\r\n    >Submit</button>\r\n    </div>\r\n    </forms> \r\n    </div>\r\n)\r\n}\r\nexport default Forms;","const data = [\r\n    {\r\n        id: 1,\r\n        urname: \"Kavya\",\r\n        email:\"kavya.mdu@gmail.com\",\r\n        role:\"Front End Engineer\",\r\n    },\r\n\r\n    {\r\n        id: 2,\r\n        urname: \"Deek\",\r\n        email:\"deek.v@gmail.com\",\r\n        role:\"Front End Engineer\"\r\n    },\r\n    {\r\n        id: 3,\r\n        urname: \"Harsha\",\r\n        email:\"heek.v@gmail.com\",\r\n        role:\"Back End Engineer\"\r\n    },\r\n\r\n];\r\n\r\nexport default data;\r\n","import React,{useState,useEffect} from 'react'; \nimport Forms from './components/Forms';\nimport './App.css';\nimport data from './data';\n\nfunction App() {\n\n  const[teamList,setTeamList]=useState(data)\n  const[memberToEdit,setmemberToEdit]=useState({\n    urname:\"\",\n    email:\"\",\n    role:\"\",\n  })\n \n\n  const addMember=(memInfo)=> {\n  console.log('meminfo=', memInfo)\n    const newMember={\n      id:Date.now(),\n      urname:memInfo.urname,\n      email:memInfo.email,\n      role:memInfo.role,\n    };\n    setTeamList([...teamList,newMember])\n  }\n  \n\n  function handleEdit(id){\n    let editInfo={};\n    console.log('index in handleEdit=',id)\n     editInfo=teamList.filter(item=>{\n      return (item.id === id)})  \n    console.log('editInfo',editInfo);\n    setmemberToEdit(editInfo)\n  }\n   \n\n//Handle Delete Member -Delete member by index and update State 'teamList'\n  function handleDelete(index){\n     const newMemList=[...teamList]; //copying\n     newMemList.splice(index,1);\n     setTeamList(newMemList);   //setting back\n  }\n\n   function editMember(editMemberInfo){\n      console.log('editMemberinfo=', editMemberInfo);\n      const editMemList=[...teamList]; //copying\n       const mapNewList= editMemList.map((item)=>{\n        if(item.id == editMemberInfo.id){\n          return(editMemberInfo) \n        }else return item;\n      })\n      \n      console.log('mapnewList=',mapNewList)\n      \n     setTeamList(mapNewList);   //setting back\n     \n }\n \n  return (\n    <div className=\"App\">\n      <h1>Team Builder App!</h1>\n       \n      <Forms \n      memberToEdit={memberToEdit[0]}\n      addMember={addMember}\n      editMember={editMember}\n      />\n     \n    <div>\n    <h2>Team Info</h2>\n    {teamList.map((item,index)=>{\n        return (\n           <div className=\"teaminfo\" >\n            <div>\n            <li>{item.urname}</li>\n            <li>{item.email}</li>\n            <li>{item.role}</li>\n            <button className=\"edit\"\n            type=\"submit\"\n            className=\"edit\"\n            onClick={(e)=>handleEdit(item.id)}>Edit</button>\n            \n            <button className=\"remove\"\n            type=\"submit\"\n             onClick={(e)=>handleDelete(index)}>Remove</button>\n            </div>\n           </div>\n        )\n    })}\n    </div>\n    </div>\n  )}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}